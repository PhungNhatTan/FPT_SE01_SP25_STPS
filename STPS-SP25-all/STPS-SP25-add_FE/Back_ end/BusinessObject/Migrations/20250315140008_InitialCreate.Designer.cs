// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(StpsContext))]
    [Migration("20250315140008_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountID");

                    b.Property<int>("AuId")
                        .HasColumnType("int")
                        .HasColumnName("auID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("AccountId");

                    b.HasIndex("AuId");

                    b.HasIndex(new[] { "Username" }, "UK_Table_1")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.AccountDetail", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Authentication", b =>
                {
                    b.Property<int>("AuthenticationId")
                        .HasColumnType("int")
                        .HasColumnName("authenticationID");

                    b.Property<string>("AuthenticationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("authenticationName");

                    b.HasKey("AuthenticationId");

                    b.ToTable("Authentication", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("locationID");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("locationName");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("typeID");

                    b.HasKey("LocationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.LocationType", b =>
                {
                    b.Property<string>("TypeId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("typeID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("typeName");

                    b.HasKey("TypeId");

                    b.ToTable("LocationType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("orderID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startDate");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TourId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tourID");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TourId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Tctour", b =>
                {
                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("TcId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tcID");

                    b.Property<string>("TourId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tourID");

                    b.HasIndex("TcId");

                    b.HasIndex("TourId");

                    b.ToTable("TCTour", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Tour", b =>
                {
                    b.Property<string>("TourId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tourID");

                    b.Property<string>("TourName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("tourName");

                    b.HasKey("TourId");

                    b.ToTable("Tour", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.TourDetail", b =>
                {
                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("endTime");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("locationID");

                    b.Property<int>("Rollno")
                        .HasColumnType("int")
                        .HasColumnName("rollno");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("startTime");

                    b.Property<string>("TourId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tourID");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.ToTable("TourDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.TourFeedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("feedbackID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountID");

                    b.Property<string>("FeedbackDetail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("feedbackDetail");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("TourId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tourID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TourId");

                    b.ToTable("TourFeedback", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.TourismCompany", b =>
                {
                    b.Property<string>("TcId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tcID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountID");

                    b.Property<string>("TcName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("tcName");

                    b.HasKey("TcId");

                    b.HasIndex("AccountId");

                    b.ToTable("TourismCompany", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.HasOne("BusinessObject.Models.Authentication", "Authentication")
                        .WithMany("Accounts")
                        .HasForeignKey("AuId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Authentication");

                    b.Navigation("Authentication");
                });

            modelBuilder.Entity("BusinessObject.Models.AccountDetail", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Location", b =>
                {
                    b.HasOne("BusinessObject.Models.LocationType", "Type")
                        .WithMany("Locations")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_LocationType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Account");

                    b.HasOne("BusinessObject.Models.Tour", "Tour")
                        .WithMany("Orders")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Tour");

                    b.Navigation("Account");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BusinessObject.Models.Tctour", b =>
                {
                    b.HasOne("BusinessObject.Models.TourismCompany", "Tc")
                        .WithMany()
                        .HasForeignKey("TcId")
                        .IsRequired()
                        .HasConstraintName("FK_TCTour_TourismCompany");

                    b.HasOne("BusinessObject.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_TCTour_Tour");

                    b.Navigation("Tc");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BusinessObject.Models.TourDetail", b =>
                {
                    b.HasOne("BusinessObject.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_TourDetail_Location");

                    b.HasOne("BusinessObject.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_TourDetail_Tour");

                    b.Navigation("Location");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BusinessObject.Models.TourFeedback", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("TourFeedbacks")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_TourFeedback_Account");

                    b.HasOne("BusinessObject.Models.Tour", "Tour")
                        .WithMany("TourFeedbacks")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_TourFeedback_Tour");

                    b.Navigation("Account");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BusinessObject.Models.TourismCompany", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("TourismCompanies")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_TourismCompany_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TourFeedbacks");

                    b.Navigation("TourismCompanies");
                });

            modelBuilder.Entity("BusinessObject.Models.Authentication", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Models.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("BusinessObject.Models.Tour", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TourFeedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
